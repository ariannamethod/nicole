#!/usr/bin/env python3
"""
Nicole Main - –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã Nicole
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –±–µ–∑ –≤–µ—Å–æ–≤, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –õ–µ–æ.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- H2O: –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤
- Nicole: –§–ª—é–∏–¥–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –±–µ–∑ –≤–µ—Å–æ–≤  
- Nicole2Nicole: –î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∞—Ö
- Nicole Memory: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤
- Nicole RAG: –•–∞–æ—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- Nicole Metrics: –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏/—Ä–µ–∑–æ–Ω–∞–Ω—Å–∞/–ø–µ—Ä–ø–ª–µ–∫—Å–∏–∏
- Nicole Telegram: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
"""

import sys
import time
import json
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ Nicole
import h2o
import nicole
import nicole2nicole
import nicole_memory
import nicole_rag
import nicole_metrics
import nicole_telegram

class NicoleSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Nicole"""
    
    def __init__(self):
        self.version = "1.0.0-alpha"
        self.components = {
            'h2o': h2o.h2o_engine,
            'core': nicole.nicole_core,
            'learning': nicole2nicole.Nicole2NicoleCore(),
            'memory': nicole_memory.NicoleMemoryCore(),
            'rag': nicole_rag.nicole_rag,
            'metrics': nicole_metrics.nicole_metrics,
            'telegram': nicole_telegram.NicoleTelegramInterface()
        }
        self.startup_time = time.time()
        
    def start_system(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É Nicole"""
        print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         NICOLE v{self.version}                        ‚ïë
‚ïë              Neural Organism Intelligence                    ‚ïë
‚ïë           Conversational Language Engine                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë                    –ü–æ—Å–≤—è—â–∞–µ—Ç—Å—è –õ–µ–æ üíô                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–µ—Å–æ–≤...
""")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        
        # H2O Engine
        print("  ‚úÖ H2O - –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤")
        
        # Learning system  
        self.components['learning'].start_continuous_learning()
        print("  ‚úÖ Nicole2Nicole - –°–∏—Å—Ç–µ–º–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è")
        
        # Memory system
        self.components['memory'].start_maintenance()
        print("  ‚úÖ Nicole Memory - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å")
        
        # RAG system
        print("  ‚úÖ Nicole RAG - –•–∞–æ—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        # Metrics system
        print("  ‚úÖ Nicole Metrics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
        
        # Core system
        print("  ‚úÖ Nicole Core - –§–ª—é–∏–¥–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã")
        
        # Telegram interface
        self.components['telegram'].start_bot()
        print("  ‚úÖ Nicole Telegram - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print(f"\\nüéâ Nicole —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞ {time.time() - self.startup_time:.2f} —Å–µ–∫—É–Ω–¥!")
        
    def get_system_status(self) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                'version': self.version,
                'uptime': time.time() - self.startup_time,
                'components': {}
            }
            
            # H2O —Å—Ç–∞—Ç—É—Å
            status['components']['h2o'] = {
                'active_transformers': len(self.components['h2o'].executor.active_transformers),
                'current_session': self.components['h2o'].session_id
            }
            
            # Core —Å—Ç–∞—Ç—É—Å
            status['components']['core'] = {
                'current_session': self.components['core'].session_id,
                'conversation_count': self.components['core'].conversation_count,
                'current_transformer': self.components['core'].current_transformer.transformer_id if self.components['core'].current_transformer else None
            }
            
            # Learning —Å—Ç–∞—Ç—É—Å
            status['components']['learning'] = self.components['learning'].get_learning_statistics()
            
            # Memory —Å—Ç–∞—Ç—É—Å
            status['components']['memory'] = self.components['memory'].get_memory_statistics()
            
            # RAG —Å—Ç–∞—Ç—É—Å
            status['components']['rag'] = self.components['rag'].get_rag_statistics()
            
            return status
            
        except Exception as e:
            return {'error': str(e)}
            
    def run_full_system_test(self):
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\\nüß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ NICOLE")
        print("=" * 60)
        
        test_results = {}
        
        # –¢–µ—Å—Ç 1: H2O Engine
        print("\\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ H2O Engine...")
        try:
            h2o.test_h2o()
            test_results['h2o'] = '‚úÖ PASSED'
        except Exception as e:
            test_results['h2o'] = f'‚ùå FAILED: {e}'
            
        # –¢–µ—Å—Ç 2: Nicole Core
        print("\\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nicole Core...")
        try:
            # –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            session = self.components['core'].start_conversation("system_test")
            response = self.components['core'].process_message("–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
            self.components['core'].end_conversation()
            test_results['core'] = '‚úÖ PASSED'
        except Exception as e:
            test_results['core'] = f'‚ùå FAILED: {e}'
            
        # –¢–µ—Å—Ç 3: Memory System
        print("\\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Memory System...")
        try:
            mem_id = self.components['memory'].store_memory("–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏", "system_test")
            memories = self.components['memory'].recall_memories("—Ç–µ—Å—Ç")
            test_results['memory'] = '‚úÖ PASSED' if memories else '‚ö†Ô∏è PARTIAL'
        except Exception as e:
            test_results['memory'] = f'‚ùå FAILED: {e}'
            
        # –¢–µ—Å—Ç 4: RAG System
        print("\\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG System...")
        try:
            context = self.components['rag'].retriever.retrieve_context("—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∞")
            test_results['rag'] = '‚úÖ PASSED'
        except Exception as e:
            test_results['rag'] = f'‚ùå FAILED: {e}'
            
        # –¢–µ—Å—Ç 5: Metrics System
        print("\\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Metrics System...")
        try:
            snapshot = self.components['metrics'].analyze_conversation_turn(
                "—Ç–µ—Å—Ç", "–æ—Ç–≤–µ—Ç", "test_transformer", "test_session"
            )
            test_results['metrics'] = '‚úÖ PASSED'
        except Exception as e:
            test_results['metrics'] = f'‚ùå FAILED: {e}'
            
        # –¢–µ—Å—Ç 6: Learning System
        print("\\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Learning System...")
        try:
            stats = self.components['learning'].get_learning_statistics()
            test_results['learning'] = '‚úÖ PASSED'
        except Exception as e:
            test_results['learning'] = f'‚ùå FAILED: {e}'
            
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\\n" + "=" * 60)
        print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        for component, result in test_results.items():
            print(f"  {component.upper()}: {result}")
            
        passed = sum(1 for r in test_results.values() if '‚úÖ' in r)
        total = len(test_results)
        
        print(f"\\nüìä –ò—Ç–æ–≥–æ: {passed}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã")
        
        if passed == total:
            print("\\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        else:
            print("\\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        interactive = nicole_telegram.InteractiveNicole()
        interactive.start_interactive()
        
    def demo_mode(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("\\nüé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô NICOLE")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å–µ—Å—Å–∏—é
        tg = self.components['telegram']
        demo_chat = "demo_user"
        
        demo_conversation = [
            ("–ü—Ä–∏–≤–µ—Ç Nicole!", "–î–µ–º–æ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            ("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–µ–º–æ: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"),
            ("–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ò–ò –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "–î–µ–º–æ: –ü—Ä–æ—Ñ–µ—Å—Å–∏—è"),
            ("–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± –ò–ò –±–µ–∑ –≤–µ—Å–æ–≤?", "–î–µ–º–æ: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å"),
            ("–ü–æ–∫–∞–∂–∏ —Å–≤–æ—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É", "–î–µ–º–æ: –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–∞–¥–∫–∏"),
            ("/stats", "–î–µ–º–æ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("/debug", "–î–µ–º–æ: –û—Ç–ª–∞–¥–∫–∞"),
            ("–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", "–î–µ–º–æ: –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"),
        ]
        
        for user_msg, description in demo_conversation:
            print(f"\\n{description}:")
            print(f"üë§ {user_msg}")
            response = tg.process_message(demo_chat, user_msg)
            time.sleep(1)
            
        print("\\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
nicole_system = NicoleSystem()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("""
ü§ñ Nicole - Neural Organism Intelligence Conversational Language Engine

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python3 nicole_main.py start      - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
  python3 nicole_main.py test       - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  python3 nicole_main.py interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python3 nicole_main.py demo       - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
  python3 nicole_main.py status     - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
""")
        return
        
    command = sys.argv[1]
    
    if command == "start":
        nicole_system.start_system()
        
    elif command == "test":
        nicole_system.start_system()
        nicole_system.run_full_system_test()
        
    elif command == "interactive":
        nicole_system.start_system()
        nicole_system.interactive_mode()
        
    elif command == "demo":
        nicole_system.start_system()
        nicole_system.demo_mode()
        
    elif command == "status":
        status = nicole_system.get_system_status()
        print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Nicole:")
        print(json.dumps(status, indent=2, ensure_ascii=False))
        
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()
