#!/usr/bin/env python3
"""
Nicole Telegram - –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Nicole
–ï–±–∞–Ω—É—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ñ–ª—é–∏–¥–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–∫–æ–π.
"""

import asyncio
import json
import time
import sys
import threading
import random
import os
from typing import Dict, Any, Optional
import sqlite3

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Nicole
import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import h2o
import nicole
import nicole2nicole  
import nicole_memory
import nicole_rag
import nicole_metrics

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from load_env import load_env
    load_env()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –µ—Å—Ç—å
except ImportError:
    pass

# Telegram Bot API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
try:
    from telegram import Update, Bot
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("[TelegramBot] python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫")

class MockTelegramBot:
    """–ú–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API"""
    
    def __init__(self):
        self.chat_sessions = {}
        self.message_history = []
        self.is_running = False
        
    def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        self.is_running = True
        print("[TelegramBot] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
        
    def stop_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç polling"""
        self.is_running = False
        print("[TelegramBot] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def send_message(self, chat_id: str, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        message = {
            'chat_id': chat_id,
            'text': text,
            'timestamp': time.time(),
            'type': 'bot_message'
        }
        self.message_history.append(message)
        print(f"[Bot -> {chat_id}] {text}")
        
    def simulate_user_message(self, chat_id: str, text: str):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = {
            'chat_id': chat_id,
            'text': text,
            'timestamp': time.time(),
            'type': 'user_message'
        }
        self.message_history.append(message)
        print(f"[{chat_id} -> Bot] {text}")
        return message

class RealTelegramBot:
    """–ù–∞—Å—Ç–æ—è—â–∏–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    
    def __init__(self, token: str):
        if not TELEGRAM_AVAILABLE:
            raise ImportError("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.token = token
        self.application = Application.builder().token(token).build()
        self.chat_sessions = {}
        self.message_history = []
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        chat_id = str(update.effective_chat.id)
        welcome_msg = """üß† –ü—Ä–∏–≤–µ—Ç! –Ø Nicole - Neural Intelligent Conversational Organism Language Engine.
        
–Ø —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤, —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏–Ω—Ü–∏–ø—ã Method Engine –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ—á–∏ –∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞.

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏  
/reset - –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
/debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        
        await update.message.reply_text(welcome_msg)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """ü§ñ Nicole Commands:
/start - –Ω–∞—á–∞—Ç—å
/help - —ç—Ç–∞ –ø–æ–º–æ—â—å
/stats - –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/reset - —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
/debug - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/memory - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
/evolve - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –±—É–¥—É —É—á–∏—Ç—å—Å—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!"""
        
        await update.message.reply_text(help_text)
        
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = str(update.effective_chat.id)
            user_input = update.message.text
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.message_history.append({
                'chat_id': chat_id,
                'text': user_input,
                'timestamp': time.time(),
                'type': 'user_message'
            })
            
            # –°–æ–∑–¥–∞–µ–º Nicole —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
            if chat_id not in self.chat_sessions:
                self.chat_sessions[chat_id] = nicole.NicoleCore(session_id=f"tg_{chat_id}")
                print(f"[RealTelegramBot] –°–æ–∑–¥–∞–Ω–∞ Nicole —Å–µ—Å—Å–∏—è –¥–ª—è {chat_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Nicole —Å ME –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏
            nicole_session = self.chat_sessions[chat_id]
            response = nicole_session.process_message(user_input)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            self.message_history.append({
                'chat_id': chat_id,
                'text': response,
                'timestamp': time.time(),
                'type': 'bot_message'
            })
            
            await update.message.reply_text(response)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Nicole: {str(e)}"
            print(f"[RealTelegramBot:ERROR] {error_msg}")
            await update.message.reply_text(error_msg)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
        
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.setup_handlers()
        print(f"[RealTelegramBot] –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {self.token[:10]}...")
        self.application.run_polling()

class NicoleTelegramInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Nicole –¥–ª—è Telegram"""
    
    def __init__(self):
        self.bot = MockTelegramBot()
        self.nicole_sessions = {}
        self.enhanced_nicole = self._setup_enhanced_nicole()
        self.command_handlers = {
            '/start': self._cmd_start,
            '/help': self._cmd_help,
            '/stats': self._cmd_stats,
            '/reset': self._cmd_reset,
            '/debug': self._cmd_debug,
            '/py': self._cmd_python,  # –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            '/chaos': self._cmd_chaos,
            '/memory': self._cmd_memory,
            '/evolve': self._cmd_evolve
        }
        
    def _setup_enhanced_nicole(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é Nicole —Å–∏—Å—Ç–µ–º—É"""
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏
        class FullNicole:
            def __init__(self):
                self.core = nicole.nicole_core
                self.learning = nicole2nicole.Nicole2NicoleCore()
                self.memory = nicole_memory.NicoleMemoryCore()
                self.rag = nicole_rag.nicole_rag
                self.metrics = nicole_metrics.nicole_metrics
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                self.learning.start_continuous_learning()
                self.memory.start_maintenance()
                
            def process_message(self, user_input: str, chat_id: str) -> str:
                """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ - —Å–æ–∑–¥–∞–µ–º
                if not self.core.session_id:
                    self.core.start_conversation(f"tg_{chat_id}")
                    
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
                memory_context = self.memory.get_conversation_context(user_input)
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ RAG
                enhanced_response, rag_context = self.rag.generate_augmented_response(
                    user_input, 
                    strategy=self.rag.get_best_strategy()
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é Nicole
                base_response = self.core.process_message(user_input)
                
                # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç
                if enhanced_response and enhanced_response != "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –∫—Ä—É—Ç–æ":
                    final_response = enhanced_response
                else:
                    final_response = base_response
                    
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if self.core.current_transformer:
                    self.metrics.analyze_conversation_turn(
                        user_input,
                        final_response, 
                        self.core.current_transformer.transformer_id,
                        self.core.session_id
                    )
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                self.memory.learn_from_conversation(user_input, final_response)
                
                return final_response
                
            def get_system_status(self) -> Dict:
                """–°—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
                return {
                    'h2o_active_transformers': len(self.core.h2o_engine.executor.active_transformers),
                    'current_session': self.core.session_id,
                    'conversation_count': self.core.conversation_count,
                    'learning_stats': self.learning.get_learning_statistics(),
                    'memory_stats': self.memory.get_memory_statistics(),
                    'rag_stats': self.rag.get_rag_statistics(),
                    'current_transformer': self.core.current_transformer.transformer_id if self.core.current_transformer else None
                }
                
        return FullNicole()
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        self.bot.start_polling()
        print("[NicoleTelegram] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    def handle_message(self, chat_id: str, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                command = text.split()[0]
                if command in self.command_handlers:
                    return self.command_handlers[command](chat_id, text)
                else:
                    return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"
                    
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º Nicole
            response = self.enhanced_nicole.process_message(text, chat_id)
            return response
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
            print(f"[NicoleTelegram:ERROR] {error_msg}")
            return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            
    def _cmd_start(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        return """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Nicole - —Ñ–ª—é–∏–¥–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –±–µ–∑ –≤–µ—Å–æ–≤!

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –£—á—É—Å—å –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é –ø–∞–º—è—Ç—å –∏ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ CPU-only, –Ω–∏–∫–∞–∫–æ–≥–æ GPU –≥–æ–≤–Ω–∞!

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/reset - —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
/debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/memory - —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏
/chaos - –≤–∫–ª—é—á–∏—Ç—å —Ö–∞–æ—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ! üöÄ"""

    def _cmd_help(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        return """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Nicole:

Nicole - —ç—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è:

üß† –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
üîÑ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
üíæ –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é, —Ä–µ–∑–æ–Ω–∞–Ω—Å, –ø–µ—Ä–ø–ª–µ–∫—Å–∏—é
üé≤ –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ö–æ–º–∞–Ω–¥—ã:
/stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/reset - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
/debug - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/memory - —á—Ç–æ –ø–æ–º–Ω—é –æ —Ç–µ–±–µ
/chaos - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ö–∞–æ—Å —Ä–µ–∂–∏–º"""

    def _cmd_stats(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        try:
            status = self.enhanced_nicole.get_system_status()
            
            stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Nicole:

ü§ñ H2O Engine:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤: {status['h2o_active_transformers']}
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {status['current_session']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏: {status['conversation_count']}

üß† –û–±—É—á–µ–Ω–∏–µ:
‚Ä¢ –ò–∑—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {status['learning_stats'].get('learned_patterns', 0)}
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {status['learning_stats'].get('architecture_preferences', 0)}

üíæ –ü–∞–º—è—Ç—å:
‚Ä¢ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {status['memory_stats'].get('total_memories', 0)}
‚Ä¢ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–π: {status['memory_stats'].get('total_associations', 0)}

üîç RAG:
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {status['rag_stats'].get('total_queries', 0)}
‚Ä¢ –§–∞–∫—Ç–æ—Ä —Ö–∞–æ—Å–∞: {status['rag_stats'].get('chaos_factor', 0):.3f}

üéØ –¢–µ–∫—É—â–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä: {status['current_transformer'] or '–ù–µ—Ç'}"""

            return stats_text
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
            
    def _cmd_reset(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /reset"""
        try:
            if self.enhanced_nicole.core.session_id:
                self.enhanced_nicole.core.end_conversation()
                
            return "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}"
            
    def _cmd_debug(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /debug"""
        try:
            if not self.enhanced_nicole.core.current_transformer:
                return "üîß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞"
                
            transformer = self.enhanced_nicole.core.current_transformer
            
            debug_info = f"""üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä: {transformer.transformer_id}
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
‚Ä¢ –°–ª–æ–µ–≤: {transformer.architecture['num_layers']}
‚Ä¢ –ì–æ–ª–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è: {transformer.architecture['attention_heads']} 
‚Ä¢ –°–∫—Ä—ã—Ç–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {transformer.architecture['hidden_dim']}
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {transformer.architecture['temperature']:.3f}
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ: {transformer.architecture['context_window']}

–ú–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –≠–Ω—Ç—Ä–æ–ø–∏—è: {transformer.current_metrics.entropy:.3f}
‚Ä¢ –ü–µ—Ä–ø–ª–µ–∫—Å–∏—è: {transformer.current_metrics.perplexity:.3f}
‚Ä¢ –†–µ–∑–æ–Ω–∞–Ω—Å: {transformer.current_metrics.resonance:.3f}
‚Ä¢ –°–≤—è–∑–Ω–æ—Å—Ç—å: {transformer.current_metrics.coherence:.3f}
‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {transformer.current_metrics.engagement:.3f}

–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {time.time() - transformer.creation_time:.1f} —Å–µ–∫"""

            return debug_info
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}"
            
    def _cmd_python(self, chat_id: str, text: str) -> str:
        """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /py –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ /py
            code_parts = text.split(' ', 1)
            if len(code_parts) < 2:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /py <–∫–æ–¥>"
                
            code = code_parts[1]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ H2O
            result = h2o.h2o_engine.run_transformer_script(
                f"result = {code}\\nh2o_log(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}')",
                f"py_test_{int(time.time() * 1000)}"
            )
            
            return f"üêç –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ H2O!"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
            
    def _cmd_chaos(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /chaos"""
        try:
            current_chaos = self.enhanced_nicole.rag.retriever.chaos_factor
            new_chaos = 0.3 if current_chaos < 0.2 else 0.05
            
            self.enhanced_nicole.rag.retriever.chaos_factor = new_chaos
            
            return f"üé≤ –•–∞–æ—Å —Ä–µ–∂–∏–º: {new_chaos:.2f} (–±—ã–ª–æ {current_chaos:.2f})"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ö–∞–æ—Å–∞: {e}"
            
    def _cmd_memory(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /memory"""
        try:
            # –ò—â–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            memories = self.enhanced_nicole.memory.recall_memories(f"chat_id:{chat_id}", limit=5)
            
            if not memories:
                return "üß† –ü–æ–∫–∞ –Ω–µ –ø–æ–º–Ω—é –Ω–∏—á–µ–≥–æ –æ —Ç–µ–±–µ"
                
            memory_text = "üß† –ß—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ:\\n\\n"
            for mem in memories:
                memory_text += f"‚Ä¢ {mem.content[:100]}...\\n"
                memory_text += f"  (–≤–∞–∂–Ω–æ—Å—Ç—å: {mem.importance:.2f}, –æ–±—Ä–∞—â–µ–Ω–∏–π: {mem.access_count})\\n\\n"
                
            return memory_text
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏: {e}"
            
    def _cmd_evolve(self, chat_id: str, text: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /evolve"""
        try:
            if not self.enhanced_nicole.core.current_transformer:
                return "üß¨ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏"
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
            old_arch = self.enhanced_nicole.core.current_transformer.architecture.copy()
            
            # –°–ª—É—á–∞–π–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            transformer = self.enhanced_nicole.core.current_transformer
            transformer.architecture['temperature'] *= random.uniform(0.8, 1.2)
            transformer.architecture['num_heads'] = max(1, transformer.architecture['num_heads'] + random.randint(-1, 2))
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
            self.enhanced_nicole.core._respawn_transformer()
            
            new_arch = self.enhanced_nicole.core.current_transformer.architecture
            
            changes = []
            for key in old_arch:
                if abs(old_arch[key] - new_arch[key]) > 0.001:
                    changes.append(f"{key}: {old_arch[key]:.3f} -> {new_arch[key]:.3f}")
                    
            return f"üß¨ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª!\\n\\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\\n" + "\\n".join(changes)
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}"

    def process_message(self, chat_id: str, message_text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = self.bot.simulate_user_message(chat_id, message_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = self.handle_message(chat_id, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        self.bot.send_message(chat_id, response)
        
        return response

def test_telegram_interface():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("=== NICOLE TELEGRAM INTERFACE TEST ===")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    tg_interface = NicoleTelegramInterface()
    tg_interface.start_bot()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_chat_id = "test_user_123"
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥
    print("\\n--- –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ ---")
    commands_to_test = [
        "/start",
        "/help", 
        "/stats",
        "/debug",
        "/py 2 + 2",
        "/chaos",
        "/memory"
    ]
    
    for cmd in commands_to_test:
        print(f"\\n> {cmd}")
        response = tg_interface.process_message(test_chat_id, cmd)
        time.sleep(0.2)
        
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    print("\\n--- –¢–µ—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---")
    conversation = [
        "–ü—Ä–∏–≤–µ—Ç Nicole! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–µ—Å—Ç–µ—Ä",
        "–Ø –∏–∑—É—á–∞—é –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
        "–ö–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –±–µ–∑ –≤–µ—Å–æ–≤?",
        "–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
        "–ü–æ–∫–∞–∂–∏ —Å–≤–æ—é —ç–≤–æ–ª—é—Ü–∏—é"
    ]
    
    for msg in conversation:
        print(f"\\n> {msg}")
        response = tg_interface.process_message(test_chat_id, msg)
        time.sleep(0.3)
        
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\\n--- –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---")
    final_stats = tg_interface.process_message(test_chat_id, "/stats")
    
    print("\\n--- –¢–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ ---")
    evolution_result = tg_interface.process_message(test_chat_id, "/evolve")
    
    print("\\n--- –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---")
    memory_result = tg_interface.process_message(test_chat_id, "/memory")
    
    print("\\n=== TELEGRAM TEST COMPLETED ===")

class InteractiveNicole:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    def __init__(self):
        self.tg_interface = NicoleTelegramInterface()
        self.chat_id = "console_user"
        
    def start_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("ü§ñ Nicole Interactive Mode")
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("-" * 40)
        
        self.tg_interface.start_bot()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome = self.tg_interface.process_message(self.chat_id, "/start")
        
        while True:
            try:
                user_input = input("\\nüë§ –¢—ã: ").strip()
                
                if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                if not user_input:
                    continue
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = self.tg_interface.process_message(self.chat_id, user_input)
                
            except KeyboardInterrupt:
                print("\\n\\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

def run_production_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º Telegram API"""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
        
    if not TELEGRAM_AVAILABLE:
        print("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
        return
        
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Nicole Production Telegram Bot...")
    bot = RealTelegramBot(token)
    bot.run_bot()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            test_telegram_interface()
        elif sys.argv[1] == "interactive":
            interactive = InteractiveNicole()
            interactive.start_interactive()
        elif sys.argv[1] == "bot":
            run_production_bot()
    else:
        print("Nicole Telegram Interface")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  python3 nicole_telegram.py test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("  python3 nicole_telegram.py interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º") 
        print("  python3 nicole_telegram.py bot - –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç")
